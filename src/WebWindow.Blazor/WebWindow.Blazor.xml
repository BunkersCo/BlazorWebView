<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebWindow.Blazor</name>
    </assembly>
    <members>
        <member name="T:WebWindows.Blazor.ComponentsDesktop">
            <summary>
            A class that initializes Blazor using the specified <see cref="T:BlazorWebView.IBlazorWebView"/> implementation.
            </summary>
        </member>
        <member name="F:WebWindows.Blazor.ComponentsDesktop.FileExtensionContentTypeProvider">
            <summary>
            Gets a file extension content type provider.
            </summary>
        </member>
        <member name="P:WebWindows.Blazor.ComponentsDesktop.InitialUriAbsolute">
            <summary>
            Gets initial absolute Uri.
            </summary>
        </member>
        <member name="P:WebWindows.Blazor.ComponentsDesktop.BaseUriAbsolute">
            <summary>
            Gets absolute base Uri.
            </summary>
        </member>
        <member name="P:WebWindows.Blazor.ComponentsDesktop.DesktopJSRuntime">
            <summary>
            Gets desktop javscript runtime interop.
            </summary>
        </member>
        <member name="P:WebWindows.Blazor.ComponentsDesktop.DesktopRenderer">
            <summary>
            Gets desktop renderer.
            </summary>
        </member>
        <member name="P:WebWindows.Blazor.ComponentsDesktop.BlazorWebView">
            <summary>
            Gets a reference to the blazor web view.
            </summary>
        </member>
        <member name="P:WebWindows.Blazor.ComponentsDesktop.BlazorAppScheme">
            <summary>
            Gets a custom HTTP Scheme for the blazor app.
            </summary>
        </member>
        <member name="M:WebWindows.Blazor.ComponentsDesktop.Run``1(BlazorWebView.IBlazorWebView,System.String,BlazorWebView.ResolveWebResourceDelegate)">
            <summary>
            Runs Blazor using the specified <see cref="T:BlazorWebView.IBlazorWebView"/> implementation,
            using the path to the index.html host file and optionally a delegate to
            resolve the normal (non framework) resources.
            </summary>
            <typeparam name="TStartup">A startup class.</typeparam>
            <param name="blazorWebView">An <see cref="T:BlazorWebView.IBlazorWebView"/> implementation.</param>
            <param name="hostHtmlPath">The specified oath to the index.html file.</param>
            <param name="defaultResolveDelegate">An optional delegate to resolve non framework resources.</param>
            <returns>An <see cref="T:System.IDisposable"/> instance that can be used to cleanup Blazor.</returns>
        </member>
        <member name="M:WebWindows.Blazor.ComponentsDesktop.GetContentType(System.String)">
            <summary>
            Gets the content type for the url.
            </summary>
            <param name="url">The url to use.</param>
            <returns>The content type.</returns>
        </member>
        <member name="M:WebWindows.Blazor.ComponentsDesktop.UnhandledException(System.Exception)">
            <summary>
            Handles an unhandled exception in blazor.
            </summary>
            <param name="ex">The unhandled exception.</param>
        </member>
        <member name="M:WebWindows.Blazor.ComponentsDesktop.RunAsync``1(WebWindows.Blazor.IPC,System.Threading.CancellationToken)">
            <summary>
            Runs blazor using the specified IPC implementation and a
            cancellationtoken that is triggered when the application should end.
            </summary>
            <typeparam name="TStartup">The type of the startup class.</typeparam>
            <param name="ipc">The IPC channel to communicate between blazor and javascript.</param>
            <param name="appLifetime">A cancellation token representing the application lifetime.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:WebWindows.Blazor.ComponentsDesktop.SupplyFrameworkFile(System.String)">
            <summary>
            A function to supply the framework file from an assembly resource stream.
            </summary>
            <param name="uri">The uri for the framework file.</param>
            <returns>A stream.</returns>
        </member>
        <member name="M:WebWindows.Blazor.ComponentsDesktop.PerformHandshakeAsync(WebWindows.Blazor.IPC)">
            <summary>
            Performs the handshake with the javascript part of blazor.
            </summary>
            <param name="ipc">The IPC channel to communicate between blazor and javascript.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:WebWindows.Blazor.ComponentsDesktop.AttachJsInterop(WebWindows.Blazor.IPC,System.Threading.CancellationToken)">
            <summary>
            Attach the javascript interop functions.
            </summary>
            <param name="ipc">The ipc channel to use.</param>
            <param name="appLifetime">A cancellation token representing the application lifetime.</param>
        </member>
        <member name="M:WebWindows.Blazor.ComponentsDesktop.GetEncodingAndOpen(System.String,System.Text.Encoding@)">
            <summary>
            Gets the encoding for a file and opens it.
            </summary>
            <param name="filename">The filename for the file to open.</param>
            <param name="encoding">The detected encoding.</param>
            <returns>A stream that represents the file.</returns>
        </member>
        <member name="M:WebWindows.Blazor.ComponentsDesktop.Log(System.String)">
            <summary>
            Log a message from blazor.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="T:WebWindows.Blazor.ComponentsDesktop.DelegateDisposable">
            <summary>
            A class that implements <see cref="T:System.IDisposable"/> by calling a delegate.
            </summary>
        </member>
        <member name="F:WebWindows.Blazor.ComponentsDesktop.DelegateDisposable.action">
            <summary>
            The delegate to call on disposal.
            </summary>
        </member>
        <member name="M:WebWindows.Blazor.ComponentsDesktop.DelegateDisposable.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:WebWindows.Blazor.ComponentsDesktop.DelegateDisposable"/> class.
            </summary>
            <param name="action">The delegate to call on disposal.</param>
        </member>
        <member name="M:WebWindows.Blazor.ComponentsDesktop.DelegateDisposable.Dispose">
            <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting
             unmanaged resources.
            </summary>
        </member>
        <member name="T:WebWindows.Blazor.ConventionBasedStartup">
            <summary>
            Handles processing of a Convention based Startup class.
            </summary>
        </member>
        <member name="M:WebWindows.Blazor.ConventionBasedStartup.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:WebWindows.Blazor.ConventionBasedStartup"/> class.
            </summary>
            <param name="instance">The startup instance.</param>
        </member>
        <member name="P:WebWindows.Blazor.ConventionBasedStartup.Instance">
            <summary>
            Gets the instance of the startup class.
            </summary>
        </member>
        <member name="M:WebWindows.Blazor.ConventionBasedStartup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Calls the ConfigureServices method on the startup class.
            </summary>
            <param name="services">The services collection to use.</param>
        </member>
        <member name="M:WebWindows.Blazor.ConventionBasedStartup.Configure(WebWindows.Blazor.DesktopApplicationBuilder,System.IServiceProvider)">
            <summary>
            Calls configure on the startup class.
            </summary>
            <param name="app">The application builder to use.</param>
            <param name="services">The services to register.</param>
        </member>
        <member name="M:WebWindows.Blazor.ConventionBasedStartup.GetConfigureMethod">
            <summary>
            Tries to get the configure method from the startup instance.
            </summary>
            <returns>The MethodInfo object.</returns>
        </member>
        <member name="M:WebWindows.Blazor.ConventionBasedStartup.GetConfigureServicesMethod">
            <summary>
            Tries to get the configureservices method from the startup instance.
            </summary>
            <returns>The MethodInfo object.</returns>
        </member>
        <member name="T:WebWindows.Blazor.DesktopApplicationBuilder">
            <summary>
            Application builder class for blazor applications.
            </summary>
        </member>
        <member name="M:WebWindows.Blazor.DesktopApplicationBuilder.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:WebWindows.Blazor.DesktopApplicationBuilder"/> class.
            </summary>
            <param name="services">The service collection to use.</param>
        </member>
        <member name="P:WebWindows.Blazor.DesktopApplicationBuilder.Entries">
            <summary>
            Gets a list of component entries with associated dom selectors.
            </summary>
        </member>
        <member name="P:WebWindows.Blazor.DesktopApplicationBuilder.Services">
            <summary>
            Gets the list of services.
            </summary>
        </member>
        <member name="M:WebWindows.Blazor.DesktopApplicationBuilder.AddComponent(System.Type,System.String)">
            <summary>
            Adds a component to the list of Entries.
            </summary>
            <param name="componentType">The type of the component to replace the content inside
            the html with.</param>
            <param name="domElementSelector">The selector to select the element in the DOM.</param>
        </member>
        <member name="M:WebWindows.Blazor.DesktopApplicationBuilder.AddComponent``1(System.String)">
            <summary>
            Adds the specified component to the list of component entries
            to replace in html.
            </summary>
            <typeparam name="T">The type of the component to replace the content inside
            the html with.</typeparam>
            <param name="domElementSelector">The selector to select the element in the DOM.</param>
        </member>
        <member name="T:WebWindows.Blazor.DesktopJSRuntime">
            <summary>
            Javascript .Net bridge for the BlazorWebView.
            </summary>
        </member>
        <member name="F:WebWindows.Blazor.DesktopJSRuntime.voidTaskResultType">
            <summary>
            The type of VoidTaskResult.
            </summary>
        </member>
        <member name="F:WebWindows.Blazor.DesktopJSRuntime.ipc">
            <summary>
            The inter process communication channel.
            </summary>
        </member>
        <member name="M:WebWindows.Blazor.DesktopJSRuntime.#ctor(WebWindows.Blazor.IPC)">
            <summary>
            Initializes a new instance of the <see cref="T:WebWindows.Blazor.DesktopJSRuntime"/> class.
            </summary>
            <param name="ipc">The inter process communication channel to use.</param>
        </member>
        <member name="M:WebWindows.Blazor.DesktopJSRuntime.BeginInvokeJS(System.Int64,System.String,System.String)">
            <summary>
            Begin an asynchronous operation to invoke a javascript function.
            </summary>
            <param name="asyncHandle">A handle uniquely identifying the asynchronous operation.</param>
            <param name="identifier">The method identifier.</param>
            <param name="argsJson">The arguments as JSON string.</param>
        </member>
        <member name="M:WebWindows.Blazor.DesktopJSRuntime.EndInvokeDotNet(Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo,Microsoft.JSInterop.Infrastructure.DotNetInvocationResult@)">
            <summary>
            Ends an asynchronous operation invoking a .NET function from javascript.
            </summary>
            <param name="invocationInfo">The invocation info.</param>
            <param name="invocationResult">The invocation result.</param>
        </member>
        <member name="M:WebWindows.Blazor.DesktopJSRuntime.HandlePossibleVoidTaskResult(System.Object)">
            <summary>
            Handle a possible void taskresult.
            </summary>
            <param name="result">The result to handle.</param>
            <returns>Return null on void.</returns>
        </member>
        <member name="T:WebWindows.Blazor.DesktopNavigationInterception">
            <summary>
            Class that setups navigation interception on this platform.
            </summary>
            <remarks>Not necessary with web views, so this class does nothing but
            implement <see cref="T:Microsoft.AspNetCore.Components.Routing.INavigationInterception" />.
            </remarks>
        </member>
        <member name="M:WebWindows.Blazor.DesktopNavigationInterception.EnableNavigationInterceptionAsync">
            <summary>
            Contract to setup navigation interception on the client.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:WebWindows.Blazor.DesktopNavigationManager">
            <summary>
            A <see cref="T:Microsoft.AspNetCore.Components.NavigationManager"/> implementation for the platform.
            </summary>
        </member>
        <member name="F:WebWindows.Blazor.DesktopNavigationManager.Instance">
            <summary>
            The single instance of the Desktop navigation manager.
            </summary>
        </member>
        <member name="F:WebWindows.Blazor.DesktopNavigationManager.InteropPrefix">
            <summary>
            The prefix for the interop to the javascript part of the navigation manager.
            </summary>
        </member>
        <member name="F:WebWindows.Blazor.DesktopNavigationManager.InteropNavigateTo">
            <summary>
            The method name for the javascript function to navigate to an url.
            </summary>
        </member>
        <member name="M:WebWindows.Blazor.DesktopNavigationManager.SetLocation(System.String,System.Boolean)">
            <summary>
            Sets the specified location.
            </summary>
            <param name="uri">The uri to set as location.</param>
            <param name="isInterceptedLink">Indicates whether this uri is an intercepted link.</param>
        </member>
        <member name="M:WebWindows.Blazor.DesktopNavigationManager.EnsureInitialized">
            <summary>
            Ensures that the navigation manager is intialized with
            the right initial and base Uri.
            </summary>
        </member>
        <member name="M:WebWindows.Blazor.DesktopNavigationManager.NavigateToCore(System.String,System.Boolean)">
            <summary>
            Navigates to the specified Uri.
            </summary>
            <param name="uri">The uri to load.</param>
            <param name="forceLoad">Force a reload by the browser.</param>
        </member>
        <member name="T:WebWindows.Blazor.DesktopRenderer">
            <summary>
            An HTML renderer for the platform.
            </summary>
            <remarks>
            Many aspects of the layering here are not what we really want, but it won't affect
            people prototyping applications with it. We can put more work into restructuring the
            hosting and startup models in the future if it's justified.
            </remarks>
        </member>
        <member name="F:WebWindows.Blazor.DesktopRenderer.RendererId">
            <summary>
            The renderer Id.
            </summary>
        </member>
        <member name="F:WebWindows.Blazor.DesktopRenderer.Writer">
            <summary>
            Reference to the renderbatch type.
            </summary>
        </member>
        <member name="F:WebWindows.Blazor.DesktopRenderer.WriteMethod">
            <summary>
            Reference to the write method on the renderbatch type.
            </summary>
        </member>
        <member name="F:WebWindows.Blazor.DesktopRenderer.ipc">
            <summary>
            The inter process communication channel.
            </summary>
        </member>
        <member name="F:WebWindows.Blazor.DesktopRenderer.jsRuntime">
            <summary>
            The javacript runtime implementation.
            </summary>
        </member>
        <member name="M:WebWindows.Blazor.DesktopRenderer.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WebWindows.Blazor.DesktopRenderer"/> class.
            </summary>
        </member>
        <member name="M:WebWindows.Blazor.DesktopRenderer.#ctor(System.IServiceProvider,WebWindows.Blazor.IPC,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:WebWindows.Blazor.DesktopRenderer"/> class.
            </summary>
            <param name="serviceProvider">The service provider to resolve services from.</param>
            <param name="ipc">The inter process communication channel.</param>
            <param name="loggerFactory">A logger factory.</param>
        </member>
        <member name="E:WebWindows.Blazor.DesktopRenderer.UnhandledException">
            <summary>
            Notifies when a rendering exception occured.
            </summary>
        </member>
        <member name="P:WebWindows.Blazor.DesktopRenderer.Dispatcher">
            <summary>
            Gets the Dispatcher associated with this renderer.
            </summary>
        </member>
        <member name="M:WebWindows.Blazor.DesktopRenderer.AddComponentAsync``1(System.String)">
            <summary>
            Attaches a new root component to the renderer,
            causing it to be displayed in the specified DOM element.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <param name="domElementSelector">A CSS selector that uniquely identifies a DOM element.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:WebWindows.Blazor.DesktopRenderer.AddComponentAsync(System.Type,System.String)">
            <summary>
            Associates the <see cref="T:Microsoft.AspNetCore.Components.IComponent"/> with the <see cref="T:WebWindows.Blazor.DesktopRenderer"/>,
            causing it to be displayed in the specified DOM element.
            </summary>
            <param name="componentType">The type of the component.</param>
            <param name="domElementSelector">A CSS selector that uniquely identifies a DOM element.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:WebWindows.Blazor.DesktopRenderer.UpdateDisplayAsync(Microsoft.AspNetCore.Components.RenderTree.RenderBatch@)">
            <summary>
            Updates the visible part of the UI.
            </summary>
            <param name="batch">The batch to render.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:WebWindows.Blazor.DesktopRenderer.HandleException(System.Exception)">
            <summary>
            Handles an exception.
            </summary>
            <param name="exception">The exception to handle.</param>
        </member>
        <member name="M:WebWindows.Blazor.DesktopRenderer.CaptureAsyncExceptions(System.Threading.Tasks.ValueTask{System.Object})">
            <summary>
            Captures an async exception for the task and invokes <see cref="E:WebWindows.Blazor.DesktopRenderer.UnhandledException"/>.
            </summary>
            <param name="task">The task to execute.</param>
        </member>
        <member name="T:WebWindows.Blazor.DesktopSynchronizationContext">
            <summary>
            A <see cref="T:System.Threading.SynchronizationContext"/> implementation that schedules operations on the UI thread.
            </summary>
        </member>
        <member name="F:WebWindows.Blazor.DesktopSynchronizationContext.workQueue">
            <summary>
            A Queue to queue work.
            </summary>
        </member>
        <member name="M:WebWindows.Blazor.DesktopSynchronizationContext.#ctor(System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:WebWindows.Blazor.DesktopSynchronizationContext"/> class.
            </summary>
            <param name="cancellationToken">A cancellation token to cancel work.</param>
        </member>
        <member name="E:WebWindows.Blazor.DesktopSynchronizationContext.UnhandledException">
            <summary>
            An event that is triggered when an unhandled exception occurs.
            </summary>
        </member>
        <member name="M:WebWindows.Blazor.DesktopSynchronizationContext.CheckAccess">
            <summary>
            Checks whether the current operation is already in the right context.
            </summary>
            <returns>True when already on the right context.</returns>
        </member>
        <member name="M:WebWindows.Blazor.DesktopSynchronizationContext.CreateCopy">
            <summary>
            Returns itself instead of creating a copy of this <see cref="T:WebWindows.Blazor.DesktopSynchronizationContext"/>.
            </summary>
            <returns>The synchronisation context.</returns>
        </member>
        <member name="M:WebWindows.Blazor.DesktopSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches an asynchronous message to a synchronisation context.
            </summary>
            <param name="d">The callback to dispatch.</param>
            <param name="state">A state object to pass.</param>
        </member>
        <member name="M:WebWindows.Blazor.DesktopSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches a synchronous message to a synchronisation context.
            </summary>
            <param name="d">The callback to dispatch.</param>
            <param name="state">A state object to pass.</param>
        </member>
        <member name="M:WebWindows.Blazor.DesktopSynchronizationContext.Stop">
            <summary>
            Stops the queue that dispatches the work to ui thread.
            </summary>
        </member>
        <member name="T:WebWindows.Blazor.DesktopSynchronizationContext.WorkItem">
            <summary>
            A workitem to schedule.
            </summary>
        </member>
        <member name="F:WebWindows.Blazor.DesktopSynchronizationContext.WorkItem.Callback">
            <summary>
            The callback to execute.
            </summary>
        </member>
        <member name="F:WebWindows.Blazor.DesktopSynchronizationContext.WorkItem.State">
            <summary>
            The state object.
            </summary>
        </member>
        <member name="F:WebWindows.Blazor.DesktopSynchronizationContext.WorkItem.Context">
            <summary>
            The context associated with the workitem.
            </summary>
        </member>
        <member name="F:WebWindows.Blazor.DesktopSynchronizationContext.WorkItem.Completed">
            <summary>
            The <see cref="T:System.Threading.ManualResetEvent"/> to signal for synchronous operations.
            </summary>
        </member>
        <member name="T:WebWindows.Blazor.DesktopSynchronizationContext.WorkQueue">
            <summary>
            A work queue.
            </summary>
        </member>
        <member name="F:WebWindows.Blazor.DesktopSynchronizationContext.WorkQueue.thread">
            <summary>
            The thread associated with the queue.
            </summary>
        </member>
        <member name="F:WebWindows.Blazor.DesktopSynchronizationContext.WorkQueue.cancellationToken">
            <summary>
            The cancellation token to use.
            </summary>
        </member>
        <member name="M:WebWindows.Blazor.DesktopSynchronizationContext.WorkQueue.#ctor(System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:WebWindows.Blazor.DesktopSynchronizationContext.WorkQueue"/> class.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="P:WebWindows.Blazor.DesktopSynchronizationContext.WorkQueue.Queue">
            <summary>
            Gets the queue to process.
            </summary>
        </member>
        <member name="M:WebWindows.Blazor.DesktopSynchronizationContext.WorkQueue.ProcessWorkitemInline(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Processes a workitem inline.
            </summary>
            <param name="callback">The callback to execute.</param>
            <param name="state">The state object.</param>
        </member>
        <member name="M:WebWindows.Blazor.DesktopSynchronizationContext.WorkQueue.CheckAccess">
            <summary>
            Checks whether the current operation is already in the right context.
            </summary>
            <returns>True when already on the right context.</returns>
        </member>
        <member name="M:WebWindows.Blazor.DesktopSynchronizationContext.WorkQueue.ProcessQueue">
            <summary>
            Process the queue.
            </summary>
        </member>
        <member name="T:WebWindows.Blazor.IPC">
            <summary>
            Inter process communication channel.
            </summary>
        </member>
        <member name="F:WebWindows.Blazor.IPC.registrations">
            <summary>
            Dictionary of registrations by key.
            </summary>
        </member>
        <member name="F:WebWindows.Blazor.IPC.blazorWebView">
            <summary>
            The <see cref="T:BlazorWebView.IBlazorWebView"/> to communicate with.
            </summary>
        </member>
        <member name="M:WebWindows.Blazor.IPC.#ctor(BlazorWebView.IBlazorWebView)">
            <summary>
            Initializes a new instance of the <see cref="T:WebWindows.Blazor.IPC"/> class.
            </summary>
            <param name="blazorWebView">The <see cref="T:BlazorWebView.IBlazorWebView"/> to communicate with.</param>
        </member>
        <member name="M:WebWindows.Blazor.IPC.Send(System.String,System.Object[])">
            <summary>
            Sends a message, triggering a javascript event with the specified arguments.
            </summary>
            <param name="eventName">The eventname.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:WebWindows.Blazor.IPC.On(System.String,System.Action{System.Object})">
            <summary>
            Registers a callback for an event name.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="callback">The callback to execute.</param>
        </member>
        <member name="M:WebWindows.Blazor.IPC.Once(System.String,System.Action{System.Object})">
            <summary>
            Registers a callback to receive an event only once.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="callback">The callback to execute.</param>
        </member>
        <member name="M:WebWindows.Blazor.IPC.Off(System.String,System.Action{System.Object})">
            <summary>
            Removes the callback function for the event name.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="callback">The callback to execute.</param>
        </member>
        <member name="M:WebWindows.Blazor.IPC.HandleScriptNotify(System.Object,System.String)">
            <summary>
            Handles a notification of a javascript call.
            </summary>
            <param name="sender">The sender.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:WebWindows.Blazor.JSInteropMethods">
            <summary>
            Methods that can be called from javascript.
            </summary>
        </member>
        <member name="M:WebWindows.Blazor.JSInteropMethods.DispatchEvent(Microsoft.AspNetCore.Components.RenderTree.WebEventDescriptor,System.String)">
            <summary>
            Dispatches an event with the specified event descriptor
            and event arguments to the renderer.
            </summary>
            <param name="eventDescriptor">The event descriptor.</param>
            <param name="eventArgsJson">The event arguments.</param>
            <returns></returns>
        </member>
        <member name="M:WebWindows.Blazor.JSInteropMethods.NotifyLocationChanged(System.String,System.Boolean)">
            <summary>
            Notify the navigation manager that the location has changed.
            </summary>
            <param name="uri">The new uri.</param>
            <param name="isInterceptedLink">Whether it is an intercepted link.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1">
            <summary>
            Implements a list that uses an array of objects to store the elements.
            
            This differs from a <see cref="T:System.Collections.Generic.List`1"/> in that
            it not only grows as required but also shrinks if cleared with significant
            excess capacity. This makes it useful for component rendering, because
            components can be long-lived and re-render frequently, with the rendered size
            varying dramatically depending on the user's navigation in the app.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.#ctor(System.Int32,System.Buffers.ArrayPool{`0})">
            <summary>
            Constructs a new instance of <see cref="T:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.Count">
            <summary>
            Gets the number of items.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.Buffer">
            <summary>
            Gets the underlying buffer.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.Append(`0@)">
            <summary>
            Appends a new item, automatically resizing the underlying array if necessary.
            </summary>
            <param name="item">The item to append.</param>
            <returns>The index of the appended item.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.Overwrite(System.Int32,`0@)">
            <summary>
            Sets the supplied value at the specified index. The index must be within
            range for the array.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.RemoveLast">
            <summary>
            Removes the last item.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.InsertExpensive(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index, moving the contents of the subsequent entries along by one.
            </summary>
            <param name="index">The index at which the value is to be inserted.</param>
            <param name="value">The value to insert.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1.Clear">
            <summary>
            Marks the array as empty, also shrinking the underlying storage if it was
            not being used to near its full capacity.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Components.Server.Circuits.RenderBatchWriter">
            <summary>
            Provides a custom binary serializer for <see cref="T:Microsoft.AspNetCore.Components.RenderTree.RenderBatch"/> instances.
            This is designed with both server-side and client-side perf in mind:
            
             * Array-like regions always have a fixed size per entry (even if some entry types
               don't require as much space as others) so the recipient can index directly.
             * The indices describing where field data starts, where each string value starts,
               etc., are written *after* that data, so when writing the data we don't have to
               compute the locations up front or seek back to an earlier point in the stream.
               The recipient can only process the data after reading it all into a buffer,
               so it's no disadvantage for the location info to be at the end.
             * We only serialize the data that the JS side will need. For example, we don't
               emit frame sequence numbers, or any representation of nonstring attribute
               values, or component instances, etc.
               
            We don't have or need a .NET reader for this format. We only read it from JS code.
            </summary>
        </member>
    </members>
</doc>
